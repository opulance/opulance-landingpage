name: publish-to-github-pages
on:
  push:
    branches:
      - main

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      - name: Setup Node.js ⚙️ - Cache dependencies ⚡ - Install dependencies 🔧
        uses: ./.github/workflows/setup-node

      - name: Setup Pages ⚙️
        uses: actions/configure-pages@v4
        with:
          static_site_generator: next

      - name: Build with Next.js 🏗️
        run: |
          # Remove the out directory to start clean
          rm -rf out
          
          # Build Next.js project
          npm run build
          
          # Debug the build output
          echo "Next.js build output:"
          ls -la
          
          # Look for the actual build output
          echo "Finding HTML files:"
          find . -name "*.html" | grep -v node_modules
          
          # Create out directory if it doesn't exist
          mkdir -p out
          
          # Create .nojekyll file to prevent Jekyll processing
          touch out/.nojekyll
          
          # First check if out directory already has the exported files
          if [ "$(find out -name "*.html" | wc -l)" -lt 1 ]; then
            # Check different possible locations for the build output
            if [ -d ".next/server/app" ]; then
              echo "Found .next/server/app, copying content..."
              cp -r .next/server/app/* out/
            fi
            
            if [ -d ".next/server/pages" ]; then
              echo "Found .next/server/pages, copying content..."
              cp -r .next/server/pages/* out/
            fi
            
            # Copy static files from .next/static to out/_next/static
            if [ -d ".next/static" ]; then
              echo "Copying .next/static to out/_next/static..."
              mkdir -p out/_next
              cp -r .next/static out/_next/
            fi
            
            # For Next.js 15+ with export option
            if [ "$(find . -path "./out" -prune -o -name "*.html" -print | wc -l)" -gt 0 ]; then
              echo "Found HTML files in the root, copying to out directory..."
              find . -path "./out" -prune -o -name "*.html" -print | xargs -I{} cp {} out/
            fi
            
            # Create a simple index.html if none was found
            if [ ! -f "out/index.html" ]; then
              echo "No index.html found, creating a basic one..."
              cat > out/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Opulance Landing Page</title>
  <meta http-equiv="refresh" content="0;URL='/opulance-landingpage/index'">
</head>
<body>
  <p>Redirecting to application...</p>
</body>
</html>
EOF
            fi
          fi
          
          # Copy any static files from public
          if [ -d "public" ]; then
            echo "Copying public directory to out..."
            cp -r public/* out/ || true
          fi
          
          # Fix paths in HTML files for GitHub Pages
          echo "Fixing paths in HTML files for GitHub Pages..."
          find out -name "*.html" -exec sed -i 's|href="/_next/|href="/opulance-landingpage/_next/|g' {} \;
          find out -name "*.html" -exec sed -i 's|src="/_next/|src="/opulance-landingpage/_next/|g' {} \;
          
          # Final debugging output
          echo "Final out directory contents:"
          find out -type f | sort || echo "No files found in out directory"
          echo "Total files in out directory: $(find out -type f | wc -l)"
          echo "HTML files in out directory: $(find out -name "*.html" | wc -l)"

      - name: Upload artifact 📡
        uses: actions/upload-pages-artifact@v3
        with:
          path: out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Publish to GitHub Pages 🚀
        id: deployment
        uses: actions/deploy-pages@v4